#include "PMTSinglePE.h"


PMTSinglePE::PMTSinglePE(const int seed) :
fResolutionPE(0.) // Make sure which value is used in your WCSim 
{
    fRand=new TRandom3(seed);
}

PMTSinglePE::~PMTSinglePE()
{
    if( !fRand ){ delete fRand; fRand=NULL; }
}

double PMTSinglePE::GetDigitizedSPE()
{
    double pe=this->GetRawSPE();
    bool pass=false;
    this->ApplyThreshold(pe, pass);
    while( !pass )
    {
        pe=this->GetRawSPE();
        this->ApplyThreshold(pe, pass);
    }
    // Maybe the current treatment of **efficiency** for 3'' PMT (R12199_02)
    // in WCSimWCDigitizerSKI::DigitizeHits of WCSimWCDigitizer.cc is wrong, 
    // since there is a description about this:
    //
    //  G4double efficiency = 0.985; // with skrn1pe (AP tuning) & 30% QE increase in stacking action
    //
    // However, ** efficiency ** is used for simulated Chernkov hits in WCSim even for the 3'' PMT.
    // Just to make a consistecny, use it below
    pe=pe*0.985;    

    // Make sure which value is used in your WCSim 
    // Compare the following value with DigitizerPEPrecision
    // of SimWCDigitizerBase::AddNewDigit
    //in WCSimWCDigitizer.hh
    double peResolution=fResolutionPE;
    return this->DoTruncate(pe, peResolution);
} 

double PMTSinglePE::GetRawSPE()
{
  int i;
  double random1=fRand->Uniform();
  double random2=fRand->Uniform(); 
  for(i = 0; i < 501; i++){
    
    if( random1<=*(fqpe0+i) ){ break; }
  }
  return (double(i-50) + random2)/22.83;
} 

void PMTSinglePE::ApplyThreshold(double& pe, bool& pass)
{
// Apply DAQ efficiency
// Taken from WCSimWCDigitizerSKI::Threshold 
// in WCSimWCDigitizer.hh

    pass=true;
    double x=pe+0.1;
    double thr=0.;; 
    double RDUMMY,err;
    if( x<1.1 )
    {
      thr=std::min(1.0,
		     -0.06374+x*(3.748+x*(-63.23+x*(452.0+x*(-1449.0+x*(2513.0
									+x*(-2529.+x*(1472.0+x*(-452.2+x*(51.34+x*2.370))))))))));
    } 
    else 
    {
      thr = 1.0;
    }

    RDUMMY=fRand->Uniform();
    if( thr<RDUMMY )
    {
        pe=0.;
        pass=false;
    }
    else
    {
      err=fRand->Gaus(0., 0.03);
      pe=pe+err;
    }
}


double PMTSinglePE::DoTruncate(const double pe, const double precision)
{
// Based on WCSimWCDigitizerBase::AddNewDigit 
// in WCSimWCDigitizer.hh
//
// digitised hit information does not have infinite precision
// so need to round the charge and time information
//
// The following is based on WCSimWCDigitizerBas::Truncate
// in WCSimWCDigitizer.hh
    if(precision < 1E-10){ return pe; }
    return precision * (int)(pe/precision); 
}
//======================================================================//
//======================================================================//
// Taken from G4float* PMT3inchR12199_02::Getqpe() in WCSimPMTObject.cc
const float PMTSinglePE::fqpe0[501]= {
    // 1
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000001, 0.000001, 0.000002, 0.000004,
    0.000008, 0.000014, 0.000025, 0.000044, 0.000486,
    // 2
    0.007195, 0.019406, 0.031920, 0.044503, 0.057189,
    0.070020, 0.083060, 0.096388, 0.110108, 0.124351,
    0.139276, 0.155072, 0.171956, 0.190167, 0.209961,
    0.231594, 0.255310, 0.281319, 0.309777, 0.340762,
    0.374259, 0.410142, 0.448167, 0.487976, 0.529101,
    0.570993, 0.613041, 0.654608, 0.695067, 0.733833,
    0.770390, 0.804317, 0.835304, 0.863151, 0.887777,
    0.909203, 0.927543, 0.942987, 0.955778, 0.966198,
    0.974543, 0.981116, 0.986205, 0.990078, 0.992974,
    0.995104, 0.996642, 0.997734, 0.998495, 0.999017,
    // 3
    0.999369, 0.999601, 0.999752, 0.999848, 0.999909,
    0.999946, 0.999969, 0.999982, 0.999990, 0.999994,
    0.999997, 0.999998, 0.999999, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    // 4
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    // 5
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    // 6
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    // 7
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    // 8
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    // 9
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    // 10
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    // Dummy element for noticing if the loop reached the end of the array                        
    0.0  };
